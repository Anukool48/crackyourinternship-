/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
      ListNode* merge(ListNode*a,ListNode*b){
          if(a==NULL)
              return b;
          if(b==NULL)
              return a;
          
          ListNode*head=NULL;
          ListNode*tail=NULL;
          
          if(a->val<=b->val){
              head=tail=a;
              a=a->next;
          }
          
          else{
              head=tail=b;
             // tail=b;
              b=b->next;
          }
          
          while(a!=NULL && b!=NULL){
              if(a->val<=b->val){
                  tail->next=a;
                  tail=a;
                  a=a->next;
              }
              
          else{
              tail->next=b;
              tail=b;
              b=b->next;
          }
          }
          
          if(a==NULL)
              tail->next=b;
          
          else
              tail->next=a;
          
          return head;
          
      }
    
    ListNode* mid(ListNode* head)
    {  
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    ListNode* sortList(ListNode* head) 
    {
         if(head == NULL || head->next == NULL)
            return head;
        ListNode* m=mid(head);
        ListNode* a=head;
         ListNode* b=m->next;
        m->next=NULL;
               
        a=sortList(a);
        b=sortList(b);
        
        ListNode*c=merge(a,b);
        
        return c;
    }
};
