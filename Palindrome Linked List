/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rev_list(ListNode* head){
        ListNode*prev=NULL;
        ListNode*nxt=NULL;
        ListNode*ptr=head;
        while(ptr!=NULL){
            nxt=ptr->next;
            ptr->next=prev;
            prev=ptr;
            ptr=nxt;
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        ListNode*ptr=head;
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
}
        
        ListNode* rev= rev_list(slow->next);
         ListNode*curr=head;
        
        while(rev!=NULL){
            if(rev->val!=curr->val)
                return false;
            
            rev=rev->next;
            curr=curr->next;
        }
        return true;
        
    }
};
